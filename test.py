# Form implementation generated from reading ui file 'd:\nice\爬虫\pixivV4.4\test.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(719, 551)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(parent=self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(20, 20, 641, 431))
        self.tabWidget.setTabPosition(QtWidgets.QTabWidget.TabPosition.North)
        self.tabWidget.setTabShape(QtWidgets.QTabWidget.TabShape.Rounded)
        self.tabWidget.setDocumentMode(False)
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.layoutWidget = QtWidgets.QWidget(parent=self.tab)
        self.layoutWidget.setGeometry(QtCore.QRect(60, 40, 521, 156))
        self.layoutWidget.setObjectName("layoutWidget")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.layoutWidget)
        self.gridLayout_5.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.inpuEdit = QtWidgets.QLineEdit(parent=self.layoutWidget)
        self.inpuEdit.setObjectName("inpuEdit")
        self.gridLayout_5.addWidget(self.inpuEdit, 0, 0, 1, 2)
        self.startButton = QtWidgets.QPushButton(parent=self.layoutWidget)
        self.startButton.setObjectName("startButton")
        self.gridLayout_5.addWidget(self.startButton, 0, 2, 1, 1)
        self.radioButton = QtWidgets.QRadioButton(parent=self.layoutWidget)
        self.radioButton.setObjectName("radioButton")
        self.gridLayout_5.addWidget(self.radioButton, 1, 0, 1, 1)
        self.radioButton_2 = QtWidgets.QRadioButton(parent=self.layoutWidget)
        self.radioButton_2.setObjectName("radioButton_2")
        self.gridLayout_5.addWidget(self.radioButton_2, 1, 1, 1, 1)
        self.radioButton_3 = QtWidgets.QRadioButton(parent=self.layoutWidget)
        self.radioButton_3.setObjectName("radioButton_3")
        self.gridLayout_5.addWidget(self.radioButton_3, 1, 2, 1, 1)
        self.progressBar = QtWidgets.QProgressBar(parent=self.layoutWidget)
        self.progressBar.setProperty("value", 99)
        self.progressBar.setObjectName("progressBar")
        self.gridLayout_5.addWidget(self.progressBar, 2, 0, 1, 3)
        self.tabWidget.addTab(self.tab, "")
        self.tab_1 = QtWidgets.QWidget()
        self.tab_1.setObjectName("tab_1")
        self.layoutWidget1 = QtWidgets.QWidget(parent=self.tab_1)
        self.layoutWidget1.setGeometry(QtCore.QRect(10, 10, 621, 391))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.layoutWidget1)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.imageinfoDisplayer = QtWidgets.QTextBrowser(parent=self.layoutWidget1)
        self.imageinfoDisplayer.setObjectName("imageinfoDisplayer")
        self.gridLayout_2.addWidget(self.imageinfoDisplayer, 1, 0, 2, 2)
        self.searchEdit = QtWidgets.QLineEdit(parent=self.layoutWidget1)
        self.searchEdit.setObjectName("searchEdit")
        self.gridLayout_2.addWidget(self.searchEdit, 0, 0, 1, 1)
        self.jump_pageButton = QtWidgets.QPushButton(parent=self.layoutWidget1)
        self.jump_pageButton.setObjectName("jump_pageButton")
        self.gridLayout_2.addWidget(self.jump_pageButton, 2, 5, 1, 1)
        self.pageLabel = QtWidgets.QLabel(parent=self.layoutWidget1)
        self.pageLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.pageLabel.setObjectName("pageLabel")
        self.gridLayout_2.addWidget(self.pageLabel, 2, 4, 1, 1)
        self.next_pageButton = QtWidgets.QPushButton(parent=self.layoutWidget1)
        self.next_pageButton.setObjectName("next_pageButton")
        self.gridLayout_2.addWidget(self.next_pageButton, 2, 6, 1, 1)
        self.pageEdit = QtWidgets.QLineEdit(parent=self.layoutWidget1)
        self.pageEdit.setMaxLength(4)
        self.pageEdit.setCursorMoveStyle(QtCore.Qt.CursorMoveStyle.LogicalMoveStyle)
        self.pageEdit.setClearButtonEnabled(False)
        self.pageEdit.setObjectName("pageEdit")
        self.gridLayout_2.addWidget(self.pageEdit, 2, 3, 1, 1)
        self.prev_pageButton = QtWidgets.QPushButton(parent=self.layoutWidget1)
        self.prev_pageButton.setObjectName("prev_pageButton")
        self.gridLayout_2.addWidget(self.prev_pageButton, 2, 2, 1, 1)
        self.images_tableWidget = QtWidgets.QTableWidget(parent=self.layoutWidget1)
        self.images_tableWidget.setObjectName("images_tableWidget")
        self.images_tableWidget.setColumnCount(0)
        self.images_tableWidget.setRowCount(0)
        self.gridLayout_2.addWidget(self.images_tableWidget, 0, 2, 2, 5)
        self.search_imageButton = QtWidgets.QPushButton(parent=self.layoutWidget1)
        self.search_imageButton.setObjectName("search_imageButton")
        self.gridLayout_2.addWidget(self.search_imageButton, 0, 1, 1, 1)
        self.tabWidget.addTab(self.tab_1, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.layoutWidget2 = QtWidgets.QWidget(parent=self.tab_2)
        self.layoutWidget2.setGeometry(QtCore.QRect(7, 10, 631, 391))
        self.layoutWidget2.setObjectName("layoutWidget2")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.layoutWidget2)
        self.gridLayout_3.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.search_tagEdit = QtWidgets.QLineEdit(parent=self.layoutWidget2)
        self.search_tagEdit.setObjectName("search_tagEdit")
        self.gridLayout_3.addWidget(self.search_tagEdit, 0, 0, 1, 1)
        self.search_tagButton = QtWidgets.QPushButton(parent=self.layoutWidget2)
        self.search_tagButton.setObjectName("search_tagButton")
        self.gridLayout_3.addWidget(self.search_tagButton, 0, 1, 1, 1)
        self.addlikeButton = QtWidgets.QPushButton(parent=self.layoutWidget2)
        self.addlikeButton.setObjectName("addlikeButton")
        self.gridLayout_3.addWidget(self.addlikeButton, 0, 2, 1, 1)
        self.adddislikeButton = QtWidgets.QPushButton(parent=self.layoutWidget2)
        self.adddislikeButton.setObjectName("adddislikeButton")
        self.gridLayout_3.addWidget(self.adddislikeButton, 0, 3, 1, 1)
        self.select_tagButton = QtWidgets.QPushButton(parent=self.layoutWidget2)
        self.select_tagButton.setObjectName("select_tagButton")
        self.gridLayout_3.addWidget(self.select_tagButton, 0, 4, 1, 1)
        self.tags_tableWidget = QtWidgets.QTableWidget(parent=self.layoutWidget2)
        self.tags_tableWidget.setObjectName("tags_tableWidget")
        self.tags_tableWidget.setColumnCount(0)
        self.tags_tableWidget.setRowCount(0)
        self.gridLayout_3.addWidget(self.tags_tableWidget, 1, 0, 1, 5)
        self.tabWidget.addTab(self.tab_2, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.scrollArea = QtWidgets.QScrollArea(parent=self.tab_3)
        self.scrollArea.setGeometry(QtCore.QRect(0, 1, 631, 401))
        self.scrollArea.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
        self.scrollArea.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 612, 399))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.tabWidget.addTab(self.tab_3, "")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.layoutWidget3 = QtWidgets.QWidget(parent=self.tab_4)
        self.layoutWidget3.setGeometry(QtCore.QRect(19, 7, 611, 391))
        self.layoutWidget3.setObjectName("layoutWidget3")
        self.gridLayout = QtWidgets.QGridLayout(self.layoutWidget3)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.pathLabel = QtWidgets.QLabel(parent=self.layoutWidget3)
        self.pathLabel.setObjectName("pathLabel")
        self.gridLayout.addWidget(self.pathLabel, 0, 0, 1, 1)
        self.savepathEdit = QtWidgets.QLineEdit(parent=self.layoutWidget3)
        self.savepathEdit.setObjectName("savepathEdit")
        self.gridLayout.addWidget(self.savepathEdit, 0, 1, 1, 2)
        self.cookieLabel = QtWidgets.QLabel(parent=self.layoutWidget3)
        self.cookieLabel.setObjectName("cookieLabel")
        self.gridLayout.addWidget(self.cookieLabel, 1, 0, 1, 1)
        self.cookiesEdit = QtWidgets.QPlainTextEdit(parent=self.layoutWidget3)
        self.cookiesEdit.setObjectName("cookiesEdit")
        self.gridLayout.addWidget(self.cookiesEdit, 1, 1, 1, 2)
        self.download_t_numberLabel = QtWidgets.QLabel(parent=self.layoutWidget3)
        self.download_t_numberLabel.setObjectName("download_t_numberLabel")
        self.gridLayout.addWidget(self.download_t_numberLabel, 2, 0, 1, 1)
        self.download_t_numberComboBox = QtWidgets.QComboBox(parent=self.layoutWidget3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.download_t_numberComboBox.sizePolicy().hasHeightForWidth())
        self.download_t_numberComboBox.setSizePolicy(sizePolicy)
        self.download_t_numberComboBox.setObjectName("download_t_numberComboBox")
        self.download_t_numberComboBox.addItem("")
        self.download_t_numberComboBox.addItem("")
        self.download_t_numberComboBox.addItem("")
        self.download_t_numberComboBox.addItem("")
        self.gridLayout.addWidget(self.download_t_numberComboBox, 2, 1, 1, 2)
        self.download_typeLabel = QtWidgets.QLabel(parent=self.layoutWidget3)
        self.download_typeLabel.setObjectName("download_typeLabel")
        self.gridLayout.addWidget(self.download_typeLabel, 3, 0, 1, 3)
        self.database_backupButton = QtWidgets.QPushButton(parent=self.layoutWidget3)
        self.database_backupButton.setObjectName("database_backupButton")
        self.gridLayout.addWidget(self.database_backupButton, 9, 0, 1, 1)
        self.getillustsCheckBox = QtWidgets.QCheckBox(parent=self.layoutWidget3)
        self.getillustsCheckBox.setObjectName("getillustsCheckBox")
        self.gridLayout.addWidget(self.getillustsCheckBox, 4, 0, 1, 3)
        self.getmangaCheckBox = QtWidgets.QCheckBox(parent=self.layoutWidget3)
        self.getmangaCheckBox.setObjectName("getmangaCheckBox")
        self.gridLayout.addWidget(self.getmangaCheckBox, 5, 0, 1, 3)
        self.getmangaSeriesCheckBox = QtWidgets.QCheckBox(parent=self.layoutWidget3)
        self.getmangaSeriesCheckBox.setObjectName("getmangaSeriesCheckBox")
        self.gridLayout.addWidget(self.getmangaSeriesCheckBox, 6, 0, 1, 3)
        self.getnovelSeriesCheckBox = QtWidgets.QCheckBox(parent=self.layoutWidget3)
        self.getnovelSeriesCheckBox.setObjectName("getnovelSeriesCheckBox")
        self.gridLayout.addWidget(self.getnovelSeriesCheckBox, 7, 0, 1, 3)
        self.getnovelsCheckBox = QtWidgets.QCheckBox(parent=self.layoutWidget3)
        self.getnovelsCheckBox.setObjectName("getnovelsCheckBox")
        self.gridLayout.addWidget(self.getnovelsCheckBox, 8, 0, 1, 3)
        self.save_configsButton = QtWidgets.QPushButton(parent=self.layoutWidget3)
        self.save_configsButton.setObjectName("save_configsButton")
        self.gridLayout.addWidget(self.save_configsButton, 9, 1, 1, 2)
        self.tabWidget.addTab(self.tab_4, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 719, 22))
        self.menubar.setObjectName("menubar")
        self.menuHelp = QtWidgets.QMenu(parent=self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(4)
        self.download_t_numberComboBox.setCurrentIndex(2)
        self.inpuEdit.textEdited['QString'].connect(self.statusbar.showMessage) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.tabWidget, self.inpuEdit)
        MainWindow.setTabOrder(self.inpuEdit, self.startButton)
        MainWindow.setTabOrder(self.startButton, self.radioButton)
        MainWindow.setTabOrder(self.radioButton, self.radioButton_2)
        MainWindow.setTabOrder(self.radioButton_2, self.radioButton_3)
        MainWindow.setTabOrder(self.radioButton_3, self.searchEdit)
        MainWindow.setTabOrder(self.searchEdit, self.search_imageButton)
        MainWindow.setTabOrder(self.search_imageButton, self.images_tableWidget)
        MainWindow.setTabOrder(self.images_tableWidget, self.imageinfoDisplayer)
        MainWindow.setTabOrder(self.imageinfoDisplayer, self.prev_pageButton)
        MainWindow.setTabOrder(self.prev_pageButton, self.pageEdit)
        MainWindow.setTabOrder(self.pageEdit, self.jump_pageButton)
        MainWindow.setTabOrder(self.jump_pageButton, self.next_pageButton)
        MainWindow.setTabOrder(self.next_pageButton, self.search_tagEdit)
        MainWindow.setTabOrder(self.search_tagEdit, self.search_tagButton)
        MainWindow.setTabOrder(self.search_tagButton, self.addlikeButton)
        MainWindow.setTabOrder(self.addlikeButton, self.adddislikeButton)
        MainWindow.setTabOrder(self.adddislikeButton, self.select_tagButton)
        MainWindow.setTabOrder(self.select_tagButton, self.tags_tableWidget)
        MainWindow.setTabOrder(self.tags_tableWidget, self.scrollArea)
        MainWindow.setTabOrder(self.scrollArea, self.savepathEdit)
        MainWindow.setTabOrder(self.savepathEdit, self.cookiesEdit)
        MainWindow.setTabOrder(self.cookiesEdit, self.download_t_numberComboBox)
        MainWindow.setTabOrder(self.download_t_numberComboBox, self.getillustsCheckBox)
        MainWindow.setTabOrder(self.getillustsCheckBox, self.getmangaCheckBox)
        MainWindow.setTabOrder(self.getmangaCheckBox, self.getmangaSeriesCheckBox)
        MainWindow.setTabOrder(self.getmangaSeriesCheckBox, self.getnovelSeriesCheckBox)
        MainWindow.setTabOrder(self.getnovelSeriesCheckBox, self.getnovelsCheckBox)
        MainWindow.setTabOrder(self.getnovelsCheckBox, self.database_backupButton)
        MainWindow.setTabOrder(self.database_backupButton, self.save_configsButton)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.startButton.setText(_translate("MainWindow", "start"))
        self.radioButton.setText(_translate("MainWindow", "onework"))
        self.radioButton_2.setText(_translate("MainWindow", "tags"))
        self.radioButton_3.setText(_translate("MainWindow", "followings"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Main"))
        self.imageinfoDisplayer.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"hr { height: 1px; border-width: 0; }\n"
"li.unchecked::marker { content: \"\\2610\"; }\n"
"li.checked::marker { content: \"\\2612\"; }\n"
"</style></head><body style=\" font-family:\'Microsoft YaHei UI\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">45242</p></body></html>"))
        self.searchEdit.setText(_translate("MainWindow", "1242"))
        self.jump_pageButton.setText(_translate("MainWindow", "jump"))
        self.pageLabel.setText(_translate("MainWindow", "1/5"))
        self.next_pageButton.setText(_translate("MainWindow", "next"))
        self.prev_pageButton.setText(_translate("MainWindow", "prev"))
        self.search_imageButton.setText(_translate("MainWindow", "search"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_1), _translate("MainWindow", "search"))
        self.search_tagButton.setText(_translate("MainWindow", "search"))
        self.addlikeButton.setText(_translate("MainWindow", "addlike"))
        self.adddislikeButton.setText(_translate("MainWindow", "adddislike"))
        self.select_tagButton.setText(_translate("MainWindow", "selecet"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "tags"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("MainWindow", "user"))
        self.pathLabel.setText(_translate("MainWindow", "path"))
        self.cookieLabel.setText(_translate("MainWindow", "cookies"))
        self.download_t_numberLabel.setText(_translate("MainWindow", "下载线程数"))
        self.download_t_numberComboBox.setItemText(0, _translate("MainWindow", "1"))
        self.download_t_numberComboBox.setItemText(1, _translate("MainWindow", "2"))
        self.download_t_numberComboBox.setItemText(2, _translate("MainWindow", "3"))
        self.download_t_numberComboBox.setItemText(3, _translate("MainWindow", "4"))
        self.download_typeLabel.setText(_translate("MainWindow", "下载作品类型"))
        self.database_backupButton.setText(_translate("MainWindow", "backup"))
        self.getillustsCheckBox.setText(_translate("MainWindow", "Getillusts"))
        self.getmangaCheckBox.setText(_translate("MainWindow", "Getmanga"))
        self.getmangaSeriesCheckBox.setText(_translate("MainWindow", "GetmangaSeries"))
        self.getnovelSeriesCheckBox.setText(_translate("MainWindow", "GetnovelSeries"))
        self.getnovelsCheckBox.setText(_translate("MainWindow", "Getnovels"))
        self.save_configsButton.setText(_translate("MainWindow", "save"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_4), _translate("MainWindow", "Settings"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))


if __name__ == '__main__':
    #!/usr/bin/env  python3
    import dns.resolver
    from dnslib.server import DNSServer, DNSLogger, BaseResolver
    from dnslib import DNSRecord, RR, A, QTYPE, CNAME


    # 定义 A 记录列表
    IP_DOMIN_A_ALL = {
    "www.test.111.com.": "192.168.1.1",
    "www.test.112.com.": "192.168.1.2",
    "www.test.113.com.": "192.168.1.3",
    "www.test.114.com.": "192.168.1.4",
    }

    # 定义 CNAME 记录列表
    CNAME_DOMIN_ALL = {
    "www.cname.111.com.": "www.baidu.com",
    "www.cname.112.com.": "www.baidu.com",
    "www.cname.113.com.": "www.baidu.com",
    "www.cname.114.com.": "www.google.com",
    }

    # 定义要转发 DNS 请求的 DNS 服务器
    FORWARD_DNS_SERVER = ['114.114.114.114']

    class TestResolver(BaseResolver):
    # 定义 DNS 请求处理函数
        def resolve(self,request,handler):
            # 从请求中获取域名
            qname = str(request.q.qname)
            # 如果是需要解析的域名，返回 A 记录
            if qname in IP_DOMIN_A_ALL.keys():
                # 构造 A 记录
                print('客户端ip: ' + handler.client_address[0] + ' 请求域名' + qname + '存在 A 记录自定义解析')
                reply = request.reply()
                reply.add_answer(RR(qname, QTYPE.A, rdata=A(IP_DOMIN_A_ALL[qname])))
                return reply
            
            elif qname in CNAME_DOMIN_ALL.keys():
                # 构造 CNAME 记录
                print('客户端ip: ' + handler.client_address[0] + ' 请求域名' + qname + '存在 CNAME 记录自定义解析')
                reply = request.reply()
                reply.add_answer(RR(qname,  QTYPE.CNAME, rdata=CNAME(CNAME_DOMIN_ALL[qname])))
                return reply

            # 否则，转发请求给其他 DNS 服务器进行解析
            else:
                # 创建指定 DNS 服务器的 Resolver 对象
                print('客户端ip: ' + handler.client_address[0] + qname + '不存在解析，正在发起权威 DNS '+ str(FORWARD_DNS_SERVER))
                resolver = dns.resolver.Resolver()
                resolver.nameservers = FORWARD_DNS_SERVER
                # 解析请求
                answer = resolver.resolve(qname, request.q.qtype)
                # 构造响应
                reply = request.reply()
                for rr in answer:
                    reply.add_answer(RR(qname, rr.rdtype, rdata=A(rr.address)))
        
                return reply

    # 创建 DNS 服务器实例
    resolver = TestResolver()
    logger = DNSLogger()
    server = DNSServer(resolver ,port=53, address='0.0.0.0' ,logger=logger)

    # 启动 DNS 服务器
    server.start()


'''
worker_processes  1;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
     proxy_intercept_errors on;


    server {
    listen       80;
    server_name  http://example.com;

    location / {
    root   html;
    index  index.html index.htm;
    proxy_pass  https://example.com;
    }
    location /api {
    root   html;
    index  index.html index.htm;
    proxy_pass  http://backend.local:8080;
    }
    location /admin {
    root   html;
    index  index.html index.htm;
    dnet all;
    allow 192.168.1.0/24;
    }
    location /static {
    root   /var/www/static;
    index  index.html index.htm;
    try_files $uri $uri/ =404;
    }
    error_page  404 /404.html;

    location = /404.html{
        root /var/www/errors/404.html;
    }
    }
 }

'''